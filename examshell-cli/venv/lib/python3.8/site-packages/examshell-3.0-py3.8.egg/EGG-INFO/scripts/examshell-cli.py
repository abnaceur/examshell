#!/Users/bocal/exam-shell/build/venv/bin/python3

'''
                                     - ExamShell -

    Client which will interact with Exam Master server to perform the 42 Exam system.

    __authors__: zaz, jpeg
    __maintainer__: jpeg

    If you're viweing this file during your exam, just go back to it, you wast precious time...

'''

import sys
import types
import os
import requests
import urllib3
import tarfile
import base64
import io
import json
import subprocess
from termcolor import colored
from attrdict import AttrDict

urllib3.disable_warnings()
requests.packages.urllib3.disable_warnings()

# IN MEMORY LOADER ############################################################
class Loader:
    def __init__(self, fullname, contents):
        self.fullname = fullname
        self.contents = contents

    def load_module(self, fullname):
        if fullname in sys.modules:
            return sys.modules[fullname]

        mod = sys.modules.setdefault(fullname, types.ModuleType(fullname))
        mod.__file__ = "<%s>" % fullname
        mod.__loader__ = self

        code = compile(self.contents, mod.__file__, "exec")

        exec(code,  mod.__dict__)
        return mod

class Finder:
    def __init__(self, modules):
        self.modules = modules

    def find_module(self, fullname, path=None):
        if (fullname in self.modules) and (path == None):
            return Loader(fullname, self.modules[fullname])
        return None

# EXAM MASTER API #############################################################
def exam_request(fct):
    """Should be used as a decorator
    Takes a function that returns a (urlpath, parameters_dict) tuple, and generates a function that sends a request to the exam master
    """

    def wrap(*args, **kwargs):
        (path, jbody, token) = fct(*args, **kwargs)
        body = json.dumps(jbody)
        if token:
            headers = {"Content-type": "application/json", "Accept": "application/json", "Authorization": f"Token {token}"}
        else:
            headers = {"Content-type": "application/json", "Accept": "application/json"}
        url = f"{HOST_BASE}/{path}/"
        try:
            response = requests.post(url, data=body, headers=headers, verify=False)
        except RuntimeError as e:
            print("Error communicating with server: try again in a few moments!\nif the error persists, get up silently and alert an exam supervisor.")
        except Exception as e:
            print(f"Exception while communicating with server ({str(e)})\n\nYou should retry.")
            print("If this error persists, tryusing another computer!\nIf it keeps happening after that, warn a staff member !")
        try:
            resp_json = AttrDict(response.json())
        except:
            resp_json = None
        return (response.status_code, resp_json)

    return wrap

# GET EXAMSHELL ###############################################################
@exam_request
def rq_get_shell():
    return "get_shell", {}, None

def get_shell():
    (rc, rj) = rq_get_shell()
    if rc != 200:
        fatal(error_http(rc))
    shell = rj['examshell']
    exam_path = os.path.dirname(os.path.abspath(__file__))
    buf = io.BytesIO(base64.b64decode(shell))
    tf = tarfile.open(mode="r:gz", fileobj=buf)
    for member in tf.getmembers():
        f=tf.extractfile(member)
        pycode=f.read()
    sys.meta_path.append(Finder({"myexamshell": pycode} ))


# ERROR MANAGEMENT ############################################################
def fatal(msg, staff=False):
    print(f"{colored('ERROR', 'red')}: {msg}")
    if staff:
        print(f"This is {colored('NOT', 'red')} expected, please contact a staff member {colored('immediately', 'red')}!")
    sys.exit(1)

def error_http(rc):
    return (f"Server returned HTTP error code {rc} - Try again in a few moments, if the error persists, contact a staff member")


# INIT CONFIG #################################################################
if os.path.isfile("/etc/exam_master_host"):
    with open("/etc/exam_master_host") as fp:
        HOST_BASE = fp.read().rstrip()
else:
    HOST_BASE = "exam-master.42.fr"

HOST_BASE = f"https://{HOST_BASE}" if 'localhost' not in HOST_BASE else f"http://{HOST_BASE}"

# MAIN ########################################################################
if __name__ == "__main__":
    try:
        get_shell()
        import myexamshell
        myexamshell.main()
    except (KeyboardInterrupt, EOFError):
        fatal("Aborting..!")
